<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- RequestMappingHandlerMapping -->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!--只扫描controller包下的类-->
    <context:component-scan base-package="com.study.controller" />

    <!--视图解析器-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>


    <!-- 早期springmvc不能很好地处理静态资源请求，所以往往会将请求的URL添加html、do等后缀，并在servlet-mapping中进行拦截 -->
    <!-- spring3.0后，为了实现更为简洁的REST风格的URL，设计了以下两种解决方案来处理静态资源请求 -->
    <!-- 首先在servlet-mapping中使用"/"拦截所有请求，接着，第一种方法使用mvc:resources标签配置静态资源目录和请求URL -->
    <mvc:resources mapping="/static/**" location="/static/"></mvc:resources>

    <!-- 第二种方法，配置mvc:default-servlet-handler标签，该标签生成org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler的bean -->
    <!-- DefaultServletHttpRequestHandler会对所有URL进行检查，如果是静态资源请求，则转交默认Servlet进行处理 -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>

</beans>
