在web.xml中配置的DispatcherServlet，观察其继承关系可以发现它实现了tomcat特供的Servlet接口，而tomcat对Servlet的初始化流程将从init(ServletConfig var1)方法开始：
interface Servlet # void init(ServletConfig var1)
-----> abstract class GenericServlet implements Servlet # void init(ServletConfig config) -----> void init()
-----> abstract class HttpServletBean extends HttpServlet # void init() 创建BeanWrapper获取和设置bean中的属性值，创建resourceLoader读取文件资源
    -----> void initServletBean()
-----> abstract class FrameworkServlet extends HttpServletBean # void initServletBean()
    -----> WebApplicationContext initWebApplicationContext() 准备创建WebApplicationContext，提供管理、获取bean的功能
    -----> WebApplicationContext createWebApplicationContext(@Nullable ApplicationContext parent)
    -----> void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac) 添加事件监听器SourceFilteringListener

在springmvc中，提供了ApplicationEventPublisher#publishEvent(Object)（事件发布器）、ApplicationEvent（事件）与 ApplicationListener（事件监听器）。
当springmvc通过ApplicationEventPublisher#publishEvent(Object)发布ApplicationEvent（事件）时，ApplicationListener（事件监听器）将会监听到。

在springmvc初始化过程中，SourceFilteringListener实际上调用的是另一个事件监听器ContextRefreshListener，因此当ApplicationContext容器初始化完成或者被刷新的时候，就会执行ContextRefreshListener的onApplicationEvent方法：
class ContextRefreshListener # void onApplicationEvent(ContextRefreshedEvent event) 其中ContextRefreshListener是FrameworkServlet的内部类
-----> abstract class FrameworkServlet # void onApplicationEvent(ContextRefreshedEvent event)
    -----> void onRefresh(ApplicationContext context)
-----> class DispatcherServlet extends FrameworkServlet # void onRefresh(ApplicationContext context)
    -----> void initStrategies(ApplicationContext context)

DispatcherServlet的initStrategies方法，将会对springmvc的各个组件进行初始化：
    protected void initStrategies(ApplicationContext context) {
        this.initMultipartResolver(context);
        this.initLocaleResolver(context);
        this.initThemeResolver(context);
        this.initHandlerMappings(context);
        this.initHandlerAdapters(context);
        this.initHandlerExceptionResolvers(context);
        this.initRequestToViewNameTranslator(context);
        this.initViewResolvers(context);
        this.initFlashMapManager(context);
    }
  
